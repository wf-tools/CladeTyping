<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" >

    <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#FFF" Offset="0.0"/>
        <GradientStop Color="#CCC" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#BBB" Offset="0.0"/>
        <GradientStop Color="#EEE" Offset="0.1"/>
        <GradientStop Color="#EEE" Offset="0.9"/>
        <GradientStop Color="#FFF" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0"/>
        <GradientStop Color="#444" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="BorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#CCC" Offset="0.0"/>
        <GradientStop Color="#444" Offset="1.0"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#444" Offset="0.0"/>
        <GradientStop Color="#888" Offset="1.0"/>
    </LinearGradientBrush>

    <Style x:Key="BaseLabel" TargetType="{x:Type Label}" BasedOn="{x:Null}">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="Meiryo UI" />
    </Style>

    <Style x:Key="PropatyHeaderLabel" TargetType="{x:Type Label}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>

    <Style x:Key="PropatyContentLabel" TargetType="{x:Type Label}" BasedOn="{x:Null}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="PropatiesLabel" TargetType="{x:Type Label}" BasedOn="{x:Null}">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style x:Key="PropatyContentTextBox" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <Style x:Key="PropatiesTextBox" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="BaseCheckbox" TargetType="{x:Type CheckBox}">
        <Setter Property="FontSize" Value="11" />
        <Setter Property = "Background" Value="LightGray"/>
        <Setter Property="FontFamily" Value="Gen Shin Gothic Bold" />
        <Style.Triggers>
            <!--IsReadOnlyと連動して、IsHitTestVisibleとIsTabStopも変更する-->
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="IsHitTestVisible" Value="True"/>
                <Setter Property="IsTabStop" Value="True"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="IsHitTestVisible" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseComboBox" TargetType="{x:Type ComboBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Background" Value="LightGray"/>

        <Style.Triggers>
            <!--IsReadOnlyと連動して、IsHitTestVisibleとIsTabStopも変更する-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#eae7e7"/>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsHitTestVisible" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="False">
                <Setter Property="IsHitTestVisible" Value="True"/>
                <Setter Property="IsTabStop" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SimpleButton" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource PressedBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RetroButton" TargetType="{x:Type Button}" >
        <Setter Property="FontSize"                              Value="{DynamicResource AppFontSize}"/>
        <Setter Property="FontWeight"                          Value="Bold"/>
        <Setter Property="FocusVisualStyle"                  Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
        <Setter Property="Focusable"                            Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Name="chrome" 
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <ContentPresenter />
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="chrome" Property="TextBlock.TextDecorations" Value="Underline" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property = "Foreground" Value="LightGray"/>
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="FlatButton" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FontFamily" Value="Meirio UI" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Background" Value="#eae7e7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="2" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property = "Foreground" Value="LightGray"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardIsChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="14"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardIsCheckedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                <EasingDoubleKeyFrame KeyTime="0" Value="14"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="ForegroundPanel" BorderThickness="1" Width="35" Height="20" CornerRadius="10">
                                <Canvas>
                                    <Border Background="White" x:Name="CheckFlag" CornerRadius="10" VerticalAlignment="Center" BorderThickness="1" Width="19" Height="18" RenderTransformOrigin="0.5,0.5">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                        <Border.Effect>
                                            <DropShadowEffect ShadowDepth="1" Direction="180" />
                                        </Border.Effect>
                                    </Border>
                                </Canvas>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Foreground" Value="Gray" />
                            <Setter Property="FontStyle" Value="Oblique" />
                            <Setter Property="FontWeight" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ForegroundPanel" Property="Background" Value="#80ABA0" />
                            <Setter Property="Foreground" Value="Black" />
                            <Setter Property="FontStyle" Value="Normal" />
                            <Setter Property="FontWeight" Value="Heavy" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="BeginStoryboardCheckedTrue" Storyboard="{StaticResource StoryboardIsChecked}" />
                                <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedFalse" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ForegroundPanel" Property="Background" Value="DarkGray" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="BeginStoryboardCheckedFalse" Storyboard="{StaticResource StoryboardIsCheckedOff}" />
                                <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedTrue" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ラジオボタンスタイル設定 -->
    <Style x:Key="PropatiesRadio" TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Cursor="Hand">
                        <Border CornerRadius="3" BorderBrush="#FF909090" BorderThickness="3">
                            <Grid>
                                <Border Width="5" Margin="2" HorizontalAlignment="Left" Background="#FFCDCDCD" CornerRadius="1" Name="RadioMark"/>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Grid>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="White" Offset="0" />
                                    <GradientStop Color="LightGray" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="RadioMark" Property="Background" Value="Red"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernButtonStyle" TargetType="{x:Type Button}" >
        <Setter Property="Foreground"                   Value="{DynamicResource AppBrand}" />
        <Setter Property="FontFamily"                   Value="{DynamicResource AppFont}"/>
        <Setter Property="FontSize"                     Value="{DynamicResource AppFontSize}"/>
        <Setter Property="FocusVisualStyle"             Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment"   Value="Center"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
        <Setter Property="Focusable"                    Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Name="chrome" 
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <ContentPresenter />
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="chrome" Property="TextBlock.TextDecorations" Value="Underline" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource AppForegroundDisabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WeirdTabItem" TargetType="{x:Type TabItem}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,10,0,0" Margin="2,0">
                        <ContentPresenter x:Name="ContentSite"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        ContentSource="Header"
                                        Margin="10,2"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#DCD3B2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="GhostWhite" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="TextOptions.TextFormattingMode" Value="Ideal"  />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalTab" TargetType="{x:Type TabItem}" >
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <RotateTransform Angle="90"/>
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderLabel" TargetType="{x:Type Label}" >
        <Setter Property="Background"                   Value="LightGray" />
        <Setter Property="FontWeight"                   Value="Bold"/>
        <Setter Property="FocusVisualStyle"             Value="{x:Null}"/>
        <Setter Property="HorizontalAlignment"          Value="Stretch"/>
        <Setter Property="VerticalAlignment"            Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment"   Value="Center"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
    </Style>

    <Style x:Key="InfoLabel" TargetType="{x:Type Label}" >
        <Setter Property="Background"                   Value="White" />
        <Setter Property="FontWeight"                   Value="Bold"/>
        <Setter Property="FontFamily"                   Value="Meiryo UI"/>
        <Setter Property="FontSize"                       Value="20"/>
        <Setter Property="HorizontalAlignment"          Value="Left"/>
        <Setter Property="VerticalAlignment"            Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="LightBlue"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property = "Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
